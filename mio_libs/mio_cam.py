import cv2

#
# Copyright 2022 by Vmio System JSC
# All rights reserved.
# Utility functions for webcam
#

# List of common resolutions
POSIBLE_RESOLUTIONS = [
    [16,16],      [42,11],      [32,32],      [40,30],      [42,32],      [48,32],      [60,40],      [84,48],      [64,64],      [72,64],      
    [128,36],     [75,64],      [150,40],     [96,64],      [96,64],      [128,48],     [96,65],      [102,64],     [101,80],     [96,96],      
    [240,64],     [160,102],    [128,128],    [160,120],    [160,144],    [144,168],    [160,152],    [160,160],    [140,192],    [160,200],    
    [224,144],    [208,176],    [240,160],    [220,176],    [160,256],    [208,208],    [256,192],    [280,192],    [256,212],    [432,128],    
    [256,224],    [240,240],    [256,240],    [320,192],    [320,192],    [320,200],    [256,256],    [256,256],    [320,208],    [320,224],    
    [320,240],    [320,256],    [384,224],    [368,240],    [376,240],    [272,340],    [400,240],    [512,192],    [448,224],    [320,320],    
    [432,240],    [560,192],    [400,270],    [512,212],    [384,288],    [480,234],    [400,300],    [480,250],    [312,390],    [512,240],    
    [320,400],    [640,200],    [480,272],    [512,256],    [512,256],    [416,352],    [480,320],    [640,240],    [640,240],    [640,256],    
    [512,342],    [368,480],    [496,384],    [800,240],    [512,384],    [640,320],    [640,350],    [640,360],    [480,500],    [512,480],    
    [720,348],    [720,350],    [640,400],    [720,364],    [800,352],    [600,480],    [640,480],    [640,512],    [768,480],    [800,480],    
    [848,480],    [854,480],    [800,600],    [960,540],    [832,624],    [960,544],    [1024,576],   [960,640],    [1024,600],   [1024,640],   
    [960,720],    [1136,640],   [1138,640],   [1024,768],   [1024,800],   [1152,720],   [1152,768],   [1280,720],   [1120,832],   [1280,768],   
    [1152,864],   [1334,750],   [1280,800],   [1152,900],   [1024,1024],  [1366,768],   [1280,854],   [1280,960],   [1600,768],   [1080,1200],  
    [1440,900],   [1440,900],   [1280,1024],  [1440,960],   [1600,900],   [1400,1050],  [1440,1024],  [1440,1080],  [1600,1024],  [1680,1050],  
    [1776,1000],  [1600,1200],  [1600,1280],  [1920,1080],  [1440,1440],  [2048,1080],  [1920,1200],  [2048,1152],  [1792,1344],  [1920,1280],  
    [2280,1080],  [2340,1080],  [1856,1392],  [2400,1080],  [1800,1440],  [2880,900],   [2160,1200],  [2048,1280],  [1920,1400],  [2520,1080],  
    [2436,1125],  [2538,1080],  [1920,1440],  [2560,1080],  [2160,1440],  [2048,1536],  [2304,1440],  [2256,1504],  [2560,1440],  [2304,1728],  
    [2560,1600],  [2880,1440],  [2960,1440],  [2560,1700],  [2560,1800],  [2880,1620],  [2560,1920],  [3440,1440],  [2736,1824],  [2880,1800],  
    [2560,2048],  [2732,2048],  [3200,1800],  [2800,2100],  [3072,1920],  [3000,2000],  [3840,1600],  [3200,2048],  [3240,2160],  [3200,2400],  
    [3840,2160],  [4096,2160],  [3840,2400],  [4096,2304],  [5120,2160],  [4480,2520],  [4096,3072],  [4500,3000],  [5120,2880],  [5120,3200],  
    [5120,4096],  [6016,3384],  [6400,4096],  [6400,4800],  [6480,3240],  [7680,4320],  [7680,4800],  [8192,4320],  [8192,4608],  [10240,4320], 
    [8192,8192],  [15360,8640]
    ]

# Some popular resolutions
POPULAR_RESOLUTIONS = [[640,480], [800,600], [1280,720], [1920, 1080], [3840,2160]]

def check_supported_resolutions(cam_id: int, only_popular_res: bool = True, min_w: int=-1, max_w:int=9999, min_h:int=-1, max_h:int=9000)->list:
    """Func Check all supported resolusions of camera:

    Args:
        cam_id (int):cam id
        only_popular_res (bool, optional): only_popular_res. Defaults to True.
        min_w (int, optional): min witgh. Defaults to -1.
        max_w (int, optional): min witgh. Defaults to 9999.
        min_h (int, optional): min hight. Defaults to -1.
        max_h (int, optional): max hight. Defaults to 9000.

    Returns:
        list: list resolutions
    """


    check_table = POPULAR_RESOLUTIONS if only_popular_res else POSIBLE_RESOLUTIONS

    OKs = []
    cap = cv2.VideoCapture(cam_id)
    if cap is None or not cap.isOpened():
        print("Can not open camera!")
        return OKs
    try:
        for res in check_table:
            if res[0] >= min_w and res[0] < max_w and cap.set(cv2.CAP_PROP_FRAME_WIDTH, res[0]) and cap.get(cv2.CAP_PROP_FRAME_WIDTH) == res[0]:
                if  res[1] >= min_h and res[1] <= max_h and cap.set(cv2.CAP_PROP_FRAME_HEIGHT, res[1]) and cap.get(cv2.CAP_PROP_FRAME_HEIGHT) == res[1]:
                    OKs.append(res)
    except Exception as e:
        print(e)
    finally:
        cap.release()

    return OKs


if __name__=="__main__":
    # Fast check
    print(check_supported_resolutions(0, True))

    # Full check (slow)
    print(check_supported_resolutions(0, False))


